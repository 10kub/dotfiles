[
  { "keys": ["alt+]"], "command": "move", "args": {"by": "pages", "forward": false} },
  { "keys": ["altgr+]"], "command": "move", "args": {"by": "pages", "forward": false} },
  { "keys": ["alt+["], "command": "move", "args": {"by": "pages", "forward": true} },
  { "keys": ["altgr+["], "command": "move", "args": {"by": "pages", "forward": true} },


  { "keys": ["alt+s"], "command": "save_all" },
  { "keys": ["altgr+s"], "command": "save_all" },
  { "keys": ["alt+z"], "command": "show_at_center" },
  { "keys": ["altgr+z"], "command": "show_at_center" },


  { "keys": ["ctrl+7"], "command": "toggle_side_bar" },
  { "keys": ["ctrl+8"], "command": "reveal_in_side_bar" },
  { "keys": ["ctrl+shift+o"], "command": "prompt_open_folder" },
  { "keys": ["f7"], "command": "toggle_setting", "args": {"setting": "word_wrap"} },
  { "keys": ["f8"], "command": "toggle_setting", "args": {"setting": "word_wrap"} },
  { "keys": ["f10"], "command": "trim_trailing_white_space" },
  { "keys": ["ctrl+alt+="], "command": "reindent" },
  { "keys": ["alt+space"], "command": "auto_complete" },
  { "keys": ["ctrl+f5"], "command": "close_workspace" },

  { "keys": ["f4"], "command": "find_prev" },

  { "keys": ["f9"], "command": "toggle_white_space"},

  { "keys": ["ctrl+shift+t"], "command": "reopen_last_file" },

  // find word under cursor whithout checkout to find panel
  { "keys": ["alt+w"], "command": "find_under_cursor" },
  { "keys": ["altgr+w"], "command": "find_under_cursor" },


  { "keys": ["ctrl+k", "g", "c"], "command": "find_in_current_file" },
  { "keys": ["ctrl+k", "g", "d"], "command": "find_in_current_folder" },

  {
    "keys": ["ctrl+k", "f"],
    "command": "goto_selection",
    "args": {"select_word_under_cursor": true}
  },

  { "keys": ["ctrl+k", "1"], "command": "st_translate", "args": {"source_language": "", "target_language": "uk"} },
  { "keys": ["ctrl+k", "2"], "command": "st_translate", "args": {"source_language": "", "target_language": "en"} },


  { "keys": ["ctrl+k", "o"], "command": "open_file_in_new_window" },

  { "keys": ["ctrl+k", "n"], "command": "open_new_tab_with_selected_text" },
  { "keys": ["ctrl+k", "m"], "command": "toggle_menu" },
  { "keys": ["ctrl+k", "s"], "command": "toggle_side_bar" },

  // split view (current)
  {
    "keys": ["ctrl+k", "v"],
    "command": "clone_file",
    "args": {"add_to_selection": true}
  },

  {
    "keys": ["ctrl+k", "c"], "command": "clear_view",
  },

  // View All Bookmarks
  { "keys": ["ctrl+k", "b"], "command": "view_bookmarks" },

  // override sublime_terminal
  { "keys": ["ctrl+shift+alt+t"], "command": "noop" },
  { "keys": ["alt+t"], "command": "open_terminal_project_folder" },
  { "keys": ["altgr+t"], "command": "open_terminal_project_folder" },


  // fast copy line wihout eol
  {
    "keys": ["ctrl+alt+l"], "command": "run_macro_file",
    "args": {"file": "res://Packages/User/macros/copy_line_no_eol.sublime-macro"},
    "context": [
      {
        "key": "selection_empty", "operator": "equal",
        "operand": true, "match_all": false,
      },
    ],
  },
  {
    "keys": ["ctrl+l"], "command": "run_macro_file",
    "args": {"file": "res://Packages/User/macros/select_line_no_eol.sublime-macro"},
    "context": [
      {
        "key": "selection_empty", "operator": "equal",
        "operand": true, "match_all": false,
      },
    ],
  },

  {
    "keys": ["f1"],
    "command": "markdown_view_html",
    "context": [
      { "key": "selector", "operator": "equal", "operand": "text.html.markdown" },
    ],
  },

  {
    "keys": ["alt+p"],
    "command": "tab_filter" 
  },
  {
    "keys": ["shift+super+tab"],
    "command": "tab_filter",
    "args": {
      "active_group_only": true,
    }
  },


  // dublicate goto_definition f12, if miss key
/*
  { "keys": ["f11"], "command": "goto_definition" },
  { "keys": ["f11"], "command": "auto_complete_open_link", "context":
    [
        { "key": "auto_complete_visible", "operator": "equal", "operand": true },
    ]
  },
  { "keys": ["ctrl+f11"], "command": "goto_definition", "args": {"side_by_side": true, "clear_to_right": true} },
  { "keys": ["shift+f11"], "command": "goto_reference" },
  { "keys": ["ctrl+shift+f11"], "command": "goto_reference", "args": {"side_by_side": true, "clear_to_right": true} },
*/
  { "keys": ["alt+0"], "command": "goto_definition" },
  { "keys": ["ctrl+alt+0"], "command": "goto_definition", "args": {"side_by_side": true, "clear_to_right": true} },
  { "keys": ["alt+9"], "command": "goto_reference" },
  { "keys": ["ctrl+alt+9"], "command": "goto_reference", "args": {"side_by_side": true, "clear_to_right": true} },


/*
  // LSP ----------------------------------------------------
  // revert default behaviour
  { "keys": ["ctrl+s"], "command": "save", "args": { "async": true } },
  {
    "command": "lsp_save",
    "keys": [
      "ctrl+alt+s"
    ],
    "context": [
      {
        "key": "lsp.session_with_capability",
        "operator": "equal",
        "operand": "textDocumentSync.willSave | textDocumentSync.willSaveWaitUntil | codeActionProvider.codeActionKinds | documentFormattingProvider | documentRangeFormattingProvider"
      }
    ]
  },
  // Goto Definition
  {
    "command": "lsp_symbol_definition",
    "args": {
      "side_by_side": false
    },
    "keys": [
      "alt+0"
    ],
    "context": [
      {
        "key": "lsp.session_with_capability",
        "operator": "equal",
        "operand": "definitionProvider"
      },
      {
        "key": "auto_complete_visible",
        "operator": "equal",
        "operand": false
      }
    ]
  },
  // Goto Type Definition
  {
      "command": "lsp_symbol_type_definition",
      "args": {
          "side_by_side": false
      },
      "keys": [
          "alt+shift+0"
      ],
      "context": [
          {
              "key": "lsp.session_with_capability",
              "operator": "equal",
              "operand": "typeDefinitionProvider"
          },
          {
              "key": "auto_complete_visible",
              "operator": "equal",
              "operand": false
          }
      ]
  },
  // Find References
  {
    "command": "lsp_symbol_references",
    "keys": [
      "alt+9"
    ],
    "context": [
      {
        "key": "lsp.session_with_capability",
        "operator": "equal",
        "operand": "referencesProvider"
      },
    ]
  },
  //Goto Implementation
  {
    "command": "lsp_symbol_implementation",
    "args": {
      "side_by_side": false
    },
    "keys": [
      "alt+8"
    ],
    "context": [
      {
        "key": "lsp.session_with_capability",
        "operator": "equal",
        "operand": "implementationProvider"
      },
      {
        "key": "auto_complete_visible",
        "operator": "equal",
        "operand": false
      }
    ]
  },
  // End LSP ----------------------------------------------------
*/

  // auto-pair for selection `
  { "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`${0:$SELECTION}`"}, "context":
    [
      { "key": "setting.auto_pair_selected", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },

  // auto-pair for selection < or >
  { "keys": ["<"], "command": "insert_snippet", "args": {"contents": "<${0:$SELECTION}>"}, "context":
    [
      { "key": "setting.auto_pair_selected", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },
  { "keys": [">"], "command": "insert_snippet", "args": {"contents": "<${0:$SELECTION}>"}, "context":
    [
      { "key": "setting.auto_pair_selected", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },

  // auto-pair for selection "
  { "keys": ["\""], "command": "insert_snippet", "args": {"contents": "\"${0:$SELECTION}\""}, "context":
    [
      { "key": "setting.auto_pair_selected", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },

    // auto-pair for selection '
  { "keys": ["'"], "command": "insert_snippet", "args": {"contents": "'${0:$SELECTION}'"}, "context":
    [
      { "key": "setting.auto_pair_selected", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },

  // disable auto-pair for '
  { "keys": ["'"], "command": "insert_snippet", "args": {"contents": "'"}, 
    "context":
    [
      { "key": "setting.auto_pair_single_quotes", "operator": "equal", "operand": false },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
      { "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
      { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true }
    ]
  },

  // auto-pair for selection { or }
  { "keys": ["{"], "command": "insert_snippet", "args": {"contents": "{${0:$SELECTION}}"}, "context":
    [
      { "key": "setting.auto_pair_selected", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },
  { "keys": ["}"], "command": "insert_snippet", "args": {"contents": "{${0:$SELECTION}}"}, "context":
    [
      { "key": "setting.auto_pair_selected", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },

  // auto-pair for selection ( or )
  { "keys": ["("], "command": "insert_snippet", "args": {"contents": "(${0:$SELECTION})"}, "context":
    [
      { "key": "setting.auto_pair_selected", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },
  { "keys": [")"], "command": "insert_snippet", "args": {"contents": "(${0:$SELECTION})"}, "context":
    [
      { "key": "setting.auto_pair_selected", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },

  // auto-pair for selection [ or ]
  { "keys": ["["], "command": "insert_snippet", "args": {"contents": "[${0:$SELECTION}]"}, "context":
    [
      { "key": "setting.auto_pair_selected", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },
  { "keys": ["]"], "command": "insert_snippet", "args": {"contents": "[${0:$SELECTION}]"}, "context":
    [
      { "key": "setting.auto_pair_selected", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  },
]
